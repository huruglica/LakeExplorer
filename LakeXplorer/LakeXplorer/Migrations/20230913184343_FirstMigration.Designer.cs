// <auto-generated />
using LakeXplorer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LakeXplorer.Migrations
{
    [DbContext(typeof(LakeXplorerDbContext))]
    [Migration("20230913184343_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LakeXplorer.Models.Lake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Lake");
                });

            modelBuilder.Entity("LakeXplorer.Models.LakeSighting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FunFact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LakeId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LakeId");

                    b.HasIndex("UserId");

                    b.ToTable("LakeSighting");
                });

            modelBuilder.Entity("LakeXplorer.Models.Like", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LakeSightingId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "LakeSightingId");

                    b.HasIndex("LakeSightingId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("LakeXplorer.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar");

                    b.Property<byte[]>("Key")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("LakeXplorer.Models.Lake", b =>
                {
                    b.HasOne("LakeXplorer.Models.User", "User")
                        .WithMany("Lakes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LakeXplorer.Models.LakeSighting", b =>
                {
                    b.HasOne("LakeXplorer.Models.Lake", "Lake")
                        .WithMany("LakeSighting")
                        .HasForeignKey("LakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LakeXplorer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lake");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LakeXplorer.Models.Like", b =>
                {
                    b.HasOne("LakeXplorer.Models.LakeSighting", "LakeSighting")
                        .WithMany("Likes")
                        .HasForeignKey("LakeSightingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LakeXplorer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LakeSighting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LakeXplorer.Models.Lake", b =>
                {
                    b.Navigation("LakeSighting");
                });

            modelBuilder.Entity("LakeXplorer.Models.LakeSighting", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("LakeXplorer.Models.User", b =>
                {
                    b.Navigation("Lakes");
                });
#pragma warning restore 612, 618
        }
    }
}
